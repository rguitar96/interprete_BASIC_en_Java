
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Dec 10 13:12:36 CET 2017
//----------------------------------------------------

package procesadores;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.util.Scanner;
import java.lang.Math.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Dec 10 13:12:36 CET 2017
  */
public class SintacticoCup extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public SintacticoCup() {super();}

  /** Constructor which sets the default scanner. */
  public SintacticoCup(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SintacticoCup(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\003\004\000\002\055" +
    "\002\000\002\003\005\000\002\056\002\000\002\011\005" +
    "\000\002\011\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\005\006\000\002\005" +
    "\006\000\002\005\003\000\002\034\004\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\004\000" +
    "\002\034\004\000\002\034\004\000\002\034\004\000\002" +
    "\035\005\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\007\003\000\002\007\003" +
    "\000\002\053\003\000\002\053\003\000\002\053\003\000" +
    "\002\054\003\000\002\054\003\000\002\010\006\000\002" +
    "\010\004\000\002\036\004\000\002\036\002\000\002\031" +
    "\003\000\002\012\005\000\002\012\004\000\002\037\007" +
    "\000\002\037\004\000\002\013\006\000\002\013\004\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\015\004\000\002\015" +
    "\004\000\002\016\010\000\002\016\010\000\002\017\005" +
    "\000\002\017\004\000\002\040\004\000\002\040\003\000" +
    "\002\020\007\000\002\020\004\000\002\041\004\000\002" +
    "\041\002\000\002\021\003\000\002\023\006\000\002\023" +
    "\004\000\002\043\004\000\002\043\002\000\002\052\004" +
    "\000\002\052\002\000\002\024\006\000\002\024\004\000" +
    "\002\044\005\000\002\044\002\000\002\042\004\000\002" +
    "\042\002\000\002\025\005\000\002\025\004\000\002\045" +
    "\004\000\002\045\002\000\002\026\005\000\002\026\004" +
    "\000\002\027\003\000\002\030\011\000\002\030\004\000" +
    "\002\047\011\000\002\047\002\000\002\046\004\000\002" +
    "\046\002\000\002\022\012\000\002\022\004\000\002\050" +
    "\004\000\002\050\002\000\002\050\004\000\002\051\004" +
    "\000\002\051\005\000\002\032\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\003\004\006\006\001\002\000\010\003" +
    "\ufffb\006\ufffb\055\ufffb\001\002\000\004\002\302\001\002" +
    "\000\046\003\ufffd\035\ufffd\036\ufffd\037\ufffd\040\uffff\041" +
    "\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\050\ufffd" +
    "\051\ufffd\052\ufffd\053\ufffd\054\ufffd\057\ufffd\063\ufffd\001" +
    "\002\000\006\003\004\006\006\001\002\000\004\002\000" +
    "\001\002\000\044\003\042\035\056\036\032\037\014\041" +
    "\015\042\053\043\025\044\026\045\017\046\027\050\044" +
    "\051\054\052\031\053\033\054\034\057\030\063\045\001" +
    "\002\000\004\040\013\001\002\000\004\002\ufffe\001\002" +
    "\000\006\003\262\005\263\001\002\000\006\003\242\005" +
    "\243\001\002\000\010\003\uffc1\006\uffc1\055\uffc1\001\002" +
    "\000\010\003\234\004\236\005\uffa7\001\002\000\010\003" +
    "\ufff4\006\ufff4\055\ufff4\001\002\000\010\003\uffc3\006\uffc3" +
    "\055\uffc3\001\002\000\010\003\ufffc\006\ufffc\055\ufffc\001" +
    "\002\000\010\003\ufff1\006\ufff1\055\ufff1\001\002\000\010" +
    "\003\uffee\006\uffee\055\uffee\001\002\000\006\003\232\004" +
    "\233\001\002\000\036\004\067\005\103\015\077\016\105" +
    "\017\066\020\073\021\104\022\072\023\071\024\065\025" +
    "\101\026\106\027\074\064\107\001\002\000\006\003\213" +
    "\005\212\001\002\000\010\003\uffb3\006\uffb3\055\uffb3\001" +
    "\002\000\010\003\uff92\006\uff92\055\uff92\001\002\000\006" +
    "\003\200\062\201\001\002\000\006\003\172\005\173\001" +
    "\002\000\010\003\uffa0\006\uffa0\055\uffa0\001\002\000\010" +
    "\003\ufff9\006\ufff9\055\ufff9\001\002\000\010\003\uffc0\006" +
    "\uffc0\055\uffc0\001\002\000\010\003\ufff0\006\ufff0\055\ufff0" +
    "\001\002\000\010\003\ufff3\006\ufff3\055\ufff3\001\002\000" +
    "\010\003\uffc4\006\uffc4\055\uffc4\001\002\000\010\003\uffed" +
    "\006\uffed\055\uffed\001\002\000\010\003\ufffa\006\ufffa\055" +
    "\ufffa\001\002\000\040\003\164\004\067\005\103\015\077" +
    "\016\105\017\066\020\073\021\104\022\072\023\071\024" +
    "\065\025\101\026\106\027\074\064\107\001\002\000\010" +
    "\003\uffcb\006\uffcb\055\uffcb\001\002\000\010\003\uffc2\006" +
    "\uffc2\055\uffc2\001\002\000\010\003\ufff2\006\ufff2\055\ufff2" +
    "\001\002\000\010\003\ufff6\006\ufff6\055\ufff6\001\002\000" +
    "\010\003\ufff8\006\ufff8\055\ufff8\001\002\000\010\003\uffef" +
    "\006\uffef\055\uffef\001\002\000\006\003\154\004\155\001" +
    "\002\000\040\003\102\004\067\005\103\015\077\016\105" +
    "\017\066\020\073\021\104\022\072\023\071\024\065\025" +
    "\101\026\106\027\074\064\107\001\002\000\010\003\ufff7" +
    "\006\ufff7\055\ufff7\001\002\000\006\003\060\004\061\001" +
    "\002\000\010\003\ufff5\006\ufff5\055\ufff5\001\002\000\010" +
    "\003\uffa5\006\uffa5\055\uffa5\001\002\000\012\003\uffa3\006" +
    "\uffa3\055\uffa3\066\063\001\002\000\010\003\uffa6\006\uffa6" +
    "\055\uffa6\001\002\000\004\004\064\001\002\000\010\003" +
    "\uffa4\006\uffa4\055\uffa4\001\002\000\004\064\125\001\002" +
    "\000\004\064\125\001\002\000\054\003\uffda\006\uffda\007" +
    "\uffda\010\uffda\011\uffda\012\uffda\013\uffda\014\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\043\uffda\055\uffda\056" +
    "\uffda\060\uffda\061\uffda\065\uffda\066\uffda\067\uffda\001\002" +
    "\000\014\003\uffaf\006\uffaf\055\uffaf\066\144\067\uffaf\001" +
    "\002\000\004\064\125\001\002\000\004\064\140\001\002" +
    "\000\004\064\125\001\002\000\054\003\uffd8\006\uffd8\007" +
    "\uffd8\010\uffd8\011\uffd8\012\uffd8\013\uffd8\014\uffd8\030\uffd8" +
    "\031\uffd8\032\uffd8\033\uffd8\034\uffd8\043\uffd8\055\uffd8\056" +
    "\uffd8\060\uffd8\061\uffd8\065\uffd8\066\uffd8\067\uffd8\001\002" +
    "\000\054\003\uffd7\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\043\uffd7\055\uffd7\056\uffd7\060\uffd7\061\uffd7\065" +
    "\uffd7\066\uffd7\067\uffd7\001\002\000\054\003\uffcc\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\014\uffcc\030" +
    "\111\031\114\032\116\033\113\034\112\043\uffcc\055\uffcc" +
    "\056\uffcc\060\uffcc\061\uffcc\065\uffcc\066\uffcc\067\uffcc\001" +
    "\002\000\004\064\125\001\002\000\054\003\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\043\uffe4\055\uffe4" +
    "\056\uffe4\060\uffe4\061\uffe4\065\uffe4\066\uffe4\067\uffe4\001" +
    "\002\000\004\064\132\001\002\000\010\003\uffb1\006\uffb1" +
    "\055\uffb1\001\002\000\054\003\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9\030\uffd9\031\uffd9" +
    "\032\uffd9\033\uffd9\034\uffd9\043\uffd9\055\uffd9\056\uffd9\060" +
    "\uffd9\061\uffd9\065\uffd9\066\uffd9\067\uffd9\001\002\000\004" +
    "\064\125\001\002\000\004\064\125\001\002\000\004\064" +
    "\125\001\002\000\034\004\067\005\103\015\077\016\105" +
    "\017\066\020\073\021\104\022\072\023\071\024\065\025" +
    "\101\026\106\027\074\001\002\000\016\030\111\031\114" +
    "\032\116\033\113\034\112\065\uffcc\001\002\000\036\004" +
    "\uffd6\005\uffd6\015\uffd6\016\uffd6\017\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027\uffd6\064" +
    "\uffd6\001\002\000\036\004\uffd0\005\uffd0\015\uffd0\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025" +
    "\uffd0\026\uffd0\027\uffd0\064\uffd0\001\002\000\036\004\uffd1" +
    "\005\uffd1\015\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\064\uffd1" +
    "\001\002\000\036\004\uffd4\005\uffd4\015\uffd4\016\uffd4\017" +
    "\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\064\uffd4\001\002\000\004\065\123\001" +
    "\002\000\036\004\uffd3\005\uffd3\015\uffd3\016\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026" +
    "\uffd3\027\uffd3\064\uffd3\001\002\000\036\004\067\005\103" +
    "\015\077\016\105\017\066\020\073\021\104\022\072\023" +
    "\071\024\065\025\101\026\106\027\074\064\107\001\002" +
    "\000\036\004\uffd2\005\uffd2\015\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2" +
    "\027\uffd2\064\uffd2\001\002\000\036\004\uffd5\005\uffd5\015" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\026\uffd5\027\uffd5\064\uffd5\001\002\000" +
    "\042\003\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\014\uffcd\043\uffcd\055\uffcd\056\uffcd\060\uffcd\061" +
    "\uffcd\065\uffcd\066\uffcd\067\uffcd\001\002\000\042\003\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\014" +
    "\uffcf\043\uffcf\055\uffcf\056\uffcf\060\uffcf\061\uffcf\065\uffcf" +
    "\066\uffcf\067\uffcf\001\002\000\054\003\uffdc\006\uffdc\007" +
    "\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc\030\uffdc" +
    "\031\uffdc\032\uffdc\033\uffdc\034\uffdc\043\uffdc\055\uffdc\056" +
    "\uffdc\060\uffdc\061\uffdc\065\uffdc\066\uffdc\067\uffdc\001\002" +
    "\000\034\004\067\005\103\015\077\016\105\017\066\020" +
    "\073\021\104\022\072\023\071\024\065\025\101\026\106" +
    "\027\074\001\002\000\004\065\127\001\002\000\054\003" +
    "\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\034\uffdb\043" +
    "\uffdb\055\uffdb\056\uffdb\060\uffdb\061\uffdb\065\uffdb\066\uffdb" +
    "\067\uffdb\001\002\000\054\003\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\030\uffe2\031\uffe2" +
    "\032\uffe2\033\uffe2\034\uffe2\043\uffe2\055\uffe2\056\uffe2\060" +
    "\uffe2\061\uffe2\065\uffe2\066\uffe2\067\uffe2\001\002\000\054" +
    "\003\uffdf\006\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf\013" +
    "\uffdf\014\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\043\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf\065\uffdf\066" +
    "\uffdf\067\uffdf\001\002\000\034\004\067\005\103\015\077" +
    "\016\105\017\066\020\073\021\104\022\072\023\071\024" +
    "\065\025\101\026\106\027\074\001\002\000\004\065\134" +
    "\001\002\000\054\003\uffe5\006\uffe5\007\uffe5\010\uffe5\011" +
    "\uffe5\012\uffe5\013\uffe5\014\uffe5\030\uffe5\031\uffe5\032\uffe5" +
    "\033\uffe5\034\uffe5\043\uffe5\055\uffe5\056\uffe5\060\uffe5\061" +
    "\uffe5\065\uffe5\066\uffe5\067\uffe5\001\002\000\054\003\uffe3" +
    "\006\uffe3\007\uffe3\010\uffe3\011\uffe3\012\uffe3\013\uffe3\014" +
    "\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\034\uffe3\043\uffe3" +
    "\055\uffe3\056\uffe3\060\uffe3\061\uffe3\065\uffe3\066\uffe3\067" +
    "\uffe3\001\002\000\042\003\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\043\uffce\055\uffce\056" +
    "\uffce\060\uffce\061\uffce\065\uffce\066\uffce\067\uffce\001\002" +
    "\000\054\003\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012" +
    "\uffe0\013\uffe0\014\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0" +
    "\034\uffe0\043\uffe0\055\uffe0\056\uffe0\060\uffe0\061\uffe0\065" +
    "\uffe0\066\uffe0\067\uffe0\001\002\000\034\004\067\005\103" +
    "\015\077\016\105\017\066\020\073\021\104\022\072\023" +
    "\071\024\065\025\101\026\106\027\074\001\002\000\004" +
    "\065\142\001\002\000\054\003\uffe6\006\uffe6\007\uffe6\010" +
    "\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\043\uffe6\055\uffe6\056\uffe6\060" +
    "\uffe6\061\uffe6\065\uffe6\066\uffe6\067\uffe6\001\002\000\054" +
    "\003\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\030\uffde\031\uffde\032\uffde\033\uffde\034\uffde" +
    "\043\uffde\055\uffde\056\uffde\060\uffde\061\uffde\065\uffde\066" +
    "\uffde\067\uffde\001\002\000\036\004\067\005\103\015\077" +
    "\016\105\017\066\020\073\021\104\022\072\023\071\024" +
    "\065\025\101\026\106\027\074\064\107\001\002\000\012" +
    "\003\uffad\006\uffad\055\uffad\067\146\001\002\000\036\004" +
    "\067\005\103\015\077\016\105\017\066\020\073\021\104" +
    "\022\072\023\071\024\065\025\101\026\106\027\074\064" +
    "\107\001\002\000\010\003\uffb2\006\uffb2\055\uffb2\001\002" +
    "\000\010\003\uffae\006\uffae\055\uffae\001\002\000\012\003" +
    "\uffb0\006\uffb0\055\uffb0\067\uffb0\001\002\000\054\003\uffe1" +
    "\006\uffe1\007\uffe1\010\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\034\uffe1\043\uffe1" +
    "\055\uffe1\056\uffe1\060\uffe1\061\uffe1\065\uffe1\066\uffe1\067" +
    "\uffe1\001\002\000\054\003\uffdd\006\uffdd\007\uffdd\010\uffdd" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\030\uffdd\031\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\043\uffdd\055\uffdd\056\uffdd\060\uffdd" +
    "\061\uffdd\065\uffdd\066\uffdd\067\uffdd\001\002\000\010\003" +
    "\uffba\006\uffba\055\uffba\001\002\000\010\003\004\006\156" +
    "\055\161\001\002\000\044\003\ufffd\035\ufffd\036\ufffd\037" +
    "\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd" +
    "\050\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\057\ufffd\063" +
    "\ufffd\001\002\000\010\003\uffbb\006\uffbb\055\uffbb\001\002" +
    "\000\010\003\004\006\156\055\161\001\002\000\010\003" +
    "\uffb8\006\uffb8\055\uffb8\001\002\000\010\003\uffb9\006\uffb9" +
    "\055\uffb9\001\002\000\004\043\165\001\002\000\010\003" +
    "\uffb6\006\uffb6\055\uffb6\001\002\000\004\004\166\001\002" +
    "\000\012\003\uffb4\006\uffb4\055\uffb4\066\170\001\002\000" +
    "\010\003\uffb7\006\uffb7\055\uffb7\001\002\000\004\004\171" +
    "\001\002\000\010\003\uffb5\006\uffb5\055\uffb5\001\002\000" +
    "\010\003\uffa1\006\uffa1\055\uffa1\001\002\000\012\003\uffa9" +
    "\006\uffa9\055\uffa9\066\174\001\002\000\004\005\176\001" +
    "\002\000\010\003\uffa2\006\uffa2\055\uffa2\001\002\000\012" +
    "\003\uffa9\006\uffa9\055\uffa9\066\174\001\002\000\010\003" +
    "\uffaa\006\uffaa\055\uffaa\001\002\000\010\003\uffc9\006\uffc9" +
    "\055\uffc9\001\002\000\006\013\202\064\204\001\002\000" +
    "\036\004\067\005\103\015\077\016\105\017\066\020\073" +
    "\021\104\022\072\023\071\024\065\025\101\026\106\027" +
    "\074\064\107\001\002\000\010\003\uffca\006\uffca\055\uffca" +
    "\001\002\000\004\005\205\001\002\000\004\065\206\001" +
    "\002\000\004\013\207\001\002\000\036\004\067\005\103" +
    "\015\077\016\105\017\066\020\073\021\104\022\072\023" +
    "\071\024\065\025\101\026\106\027\074\064\107\001\002" +
    "\000\010\003\uffc8\006\uffc8\055\uffc8\001\002\000\010\003" +
    "\uffc7\006\uffc7\055\uffc7\001\002\000\004\013\214\001\002" +
    "\000\010\003\uffc5\006\uffc5\055\uffc5\001\002\000\036\004" +
    "\067\005\103\015\077\016\105\017\066\020\073\021\104" +
    "\022\072\023\071\024\065\025\101\026\106\027\074\064" +
    "\107\001\002\000\010\003\uffc6\006\uffc6\055\uffc6\001\002" +
    "\000\016\007\224\010\225\011\217\012\220\013\221\014" +
    "\223\001\002\000\036\004\uffea\005\uffea\015\uffea\016\uffea" +
    "\017\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea\025" +
    "\uffea\026\uffea\027\uffea\064\uffea\001\002\000\036\004\uffe9" +
    "\005\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\064\uffe9" +
    "\001\002\000\036\004\uffe8\005\uffe8\015\uffe8\016\uffe8\017" +
    "\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8" +
    "\026\uffe8\027\uffe8\064\uffe8\001\002\000\036\004\067\005" +
    "\103\015\077\016\105\017\066\020\073\021\104\022\072" +
    "\023\071\024\065\025\101\026\106\027\074\064\107\001" +
    "\002\000\036\004\uffe7\005\uffe7\015\uffe7\016\uffe7\017\uffe7" +
    "\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026" +
    "\uffe7\027\uffe7\064\uffe7\001\002\000\036\004\uffec\005\uffec" +
    "\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\064\uffec\001\002" +
    "\000\036\004\uffeb\005\uffeb\015\uffeb\016\uffeb\017\uffeb\020" +
    "\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\064\uffeb\001\002\000\004\060\227\001\002\000" +
    "\006\004\231\043\025\001\002\000\010\003\uffbc\006\uffbc" +
    "\055\uffbc\001\002\000\010\003\uffbd\006\uffbd\055\uffbd\001" +
    "\002\000\010\003\uffbe\006\uffbe\055\uffbe\001\002\000\010" +
    "\003\uffbf\006\uffbf\055\uffbf\001\002\000\010\003\uffab\006" +
    "\uffab\055\uffab\001\002\000\004\005\240\001\002\000\004" +
    "\067\237\001\002\000\004\005\uffa8\001\002\000\012\003" +
    "\uffa9\006\uffa9\055\uffa9\066\174\001\002\000\010\003\uffac" +
    "\006\uffac\055\uffac\001\002\000\010\003\uff98\006\uff98\055" +
    "\uff98\001\002\000\004\013\244\001\002\000\036\004\067" +
    "\005\103\015\077\016\105\017\066\020\073\021\104\022" +
    "\072\023\071\024\065\025\101\026\106\027\074\064\107" +
    "\001\002\000\004\061\246\001\002\000\036\004\067\005" +
    "\103\015\077\016\105\017\066\020\073\021\104\022\072" +
    "\023\071\024\065\025\101\026\106\027\074\064\107\001" +
    "\002\000\010\003\uff96\006\uff96\056\251\001\002\000\006" +
    "\003\004\006\255\001\002\000\040\003\253\004\067\005" +
    "\103\015\077\016\105\017\066\020\073\021\104\022\072" +
    "\023\071\024\065\025\101\026\106\027\074\064\107\001" +
    "\002\000\006\003\uff97\006\uff97\001\002\000\006\003\uff95" +
    "\006\uff95\001\002\000\010\003\uff99\006\uff99\055\uff99\001" +
    "\002\000\046\003\ufffd\035\ufffd\036\ufffd\037\ufffd\041\ufffd" +
    "\042\ufffd\043\ufffd\044\ufffd\045\ufffd\046\ufffd\047\260\050" +
    "\ufffd\051\ufffd\052\ufffd\053\ufffd\054\ufffd\057\ufffd\063\ufffd" +
    "\001\002\000\006\003\004\006\255\001\002\000\010\003" +
    "\uff94\006\uff94\055\uff94\001\002\000\004\005\261\001\002" +
    "\000\010\003\uff93\006\uff93\055\uff93\001\002\000\010\003" +
    "\uff9e\006\uff9e\055\uff9e\001\002\000\004\064\264\001\002" +
    "\000\004\004\265\001\002\000\006\065\uff9a\066\266\001" +
    "\002\000\004\004\301\001\002\000\004\065\270\001\002" +
    "\000\012\003\uff9c\006\uff9c\055\uff9c\066\272\001\002\000" +
    "\010\003\uff9f\006\uff9f\055\uff9f\001\002\000\004\005\273" +
    "\001\002\000\004\064\274\001\002\000\004\004\275\001" +
    "\002\000\006\065\uff9a\066\266\001\002\000\004\065\277" +
    "\001\002\000\012\003\uff9c\006\uff9c\055\uff9c\066\272\001" +
    "\002\000\010\003\uff9d\006\uff9d\055\uff9d\001\002\000\004" +
    "\065\uff9b\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\300\000\006\003\004\011\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\055\011\056\010\001\001" +
    "\000\006\003\007\011\006\001\001\000\002\001\001\000" +
    "\050\002\023\012\042\013\034\014\050\015\040\016\020" +
    "\017\045\020\015\021\035\022\054\023\047\024\056\025" +
    "\017\026\037\027\046\030\022\031\051\032\036\033\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\074\006\075\010\215\034\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\074\006\075\010\162\034\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\074\006\075\010\067\034\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\035\152\001\001" +
    "\000\004\035\151\001\001\000\002\001\001\000\004\043" +
    "\144\001\001\000\004\035\142\001\001\000\002\001\001" +
    "\000\004\035\136\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\116\036\135\053\120\054\117\001\001" +
    "\000\004\035\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\035\130" +
    "\001\001\000\004\035\127\001\001\000\004\035\123\001" +
    "\001\000\010\005\074\006\107\034\077\001\001\000\012" +
    "\007\116\036\114\053\120\054\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\074\006" +
    "\075\010\121\034\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\074\006\125\034\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\005\074\006\132\034\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\074\006\140\034\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\005\074\006\075\010\150\034\077\001\001" +
    "\000\004\052\146\001\001\000\012\005\074\006\075\010" +
    "\147\034\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\157\040\156\001\001\000\004" +
    "\056\010\001\001\000\002\001\001\000\006\011\157\040" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\041" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\044\176\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\202\001" +
    "\001\000\012\005\074\006\075\010\210\034\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\005\074\006\075\010\207\034\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\005\074\006\075\010\214" +
    "\034\077\001\001\000\002\001\001\000\004\004\221\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\005\074\006\075\010\225\034\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\227\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\240\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\005\074\006\075\010" +
    "\244\034\077\001\001\000\002\001\001\000\012\005\074" +
    "\006\075\010\246\034\077\001\001\000\004\050\247\001" +
    "\001\000\006\011\255\051\253\001\001\000\012\005\074" +
    "\006\075\010\251\034\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\056\010\001\001" +
    "\000\006\011\255\051\256\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\266\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\047\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\275\001\001\000\002\001\001" +
    "\000\004\047\277\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SintacticoCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SintacticoCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SintacticoCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main (String argc[]) throws Exception{
	String extension="";
	String programa=argc[0]; 
	
	for (int i=programa.length()-4;i<programa.length();i++){
			extension=extension+programa.charAt(i);
		}
		if(extension.equals(".bas")){
			FileInputStream prog=new FileInputStream(programa);
			Lexico y=new Lexico(prog);
			SintacticoCup principal=new SintacticoCup(y);
			
			principal.parse();
		} else { System.err.println("Error en la entrada: el archivo debe ser de extension .bas para poder analizarlo."); }
	}
	
	public void syntax_error(Symbol s) {
		System.err.println("Error de sintaxis. Linea: " +(s.left+1)+". Posicion en la linea: " +(s.right)+ ". Valor del token invalido: "+s.value+".");
	}  
	
	public void report_fatal_error(String message, Object info) {
		done_parsing();
		report_error("Error incontrolable de sintaxis: "
		+ "No se puede recuperar del error, analisis concluido. Informacion: - "
		+ message + " ",(Symbol)info);
		report_error("Finalizacion forzosa.", null);
		System.exit(1);
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$SintacticoCup$actions {


	public class variableTDS {
		private String tipo;
		private String valor;
		public variableTDS(String tipo, String valor) {
			this.tipo=tipo;
			this.valor=valor;
		}
		public String getTipo(){
			return tipo;
		}
		public String getValor(){
			return valor;
		}
	}
	
	//atributos TDS: nombre, tipo, valor
	Hashtable<String, variableTDS> tablaSimbolos = new Hashtable<String, variableTDS>();
	boolean primera = true;
	int lineaActual = 0;
	Arbol arbol;
	NodoRaiz nodoRaiz;
	public void lineaValida(String ent, int i) {
		ent = ent.replace("\n", "");
		int n = Integer.parseInt(ent);
		
		if (n<=lineaActual) {System.err.println("El indicador de linea " + n + " en la linea " + i + " no es secuencial.");
		} else { lineaActual=n;}
	}

	
	public boolean variableAlmacenada(String variable) {
		if (tablaSimbolos.containsKey(variable)) {
			return true;
		} else {
			return false;
		}
	}
	
	public void introducirVariableTDS(String variable, String valor) {
	
		if (!variableAlmacenada(variable)) {
			String tipo;
			
			switch (variable.length()) {
			case 1:  
						tipo = "numerica";
						tablaSimbolos.put(variable, new variableTDS(tipo, valor));
				break;
			case 2: if (valor.length()<19) {
						tipo = "cadena";
						tablaSimbolos.put(variable, new variableTDS(tipo, valor));
						} else {
							System.err.println("Error semantico, las variables deben ser como maximo de 18 caracteres.");
							
							}
				
				break;
			case 3: tipo = "funcion";
				tablaSimbolos.put(variable, new variableTDS(tipo, valor));
				break;
			default: tipo = "suscrita";
				tablaSimbolos.put(variable, new variableTDS(tipo, valor));
				break;
			}
			
		} else {
			System.err.println("Se ha declarado una variable de nuevo.");
		}
	}
	
	public boolean comprobarEntero(String s) {
		try {
			Long.parseLong(s);
			return true;
		} catch (Exception e) {
			return false;
		}
	}
	
	public String tipoVar(String v) {
	switch (v.length()) {
			case 1: return "numerica";
			case 2: return "cadena";
			case 3: return "funcion";
			default: return "suscrita";
			}
	}
	public String tipoConst(String c) {
		
		try {
			Double.parseDouble(c);
			return "numerica";
		} catch (Exception e) {
			if (c == null) { return "null";} else {return "cadena";}
		}
	}
	
	public boolean comprobarLogaritmo(String s) {
		try {
			if (Double.parseDouble(s)>0) {return true;} else { return false;}
		} catch (Exception e) {
			return false;
		}
	}
	public boolean comprobarRaiz(String s) {
		try {
			if (Double.parseDouble(s)>=0) {return true;} else { return false;}
		} catch (Exception e) {
			return false;
		}
	}
	
	public boolean esEntero(String o) {
		try {
			Double.parseDouble(o);
			return true;
		} catch (Exception e) {
			if ((tablaSimbolos.containsKey(o))&&(tablaSimbolos.get(o).getTipo()=="numerica")) {
				return true;
			} else {
				return false;
			}
		}
	}
	
	public void finAnalisis(){
		System.out.println("**************FIN DEL ANALIZADOR SINTACTICO**************");
		imprimirTablaSimbolos();
		
	}
	
	public void imprimirTablaSimbolos(){

		System.out.println("______________________________________________________\n");
		System.out.println("NOMBRE\t\t\tVALOR\t\t\tTIPO");
		System.out.println("______________________________________________________\n");
		Enumeration en  = tablaSimbolos.keys();
		
		while(en.hasMoreElements()){
		
			String siguiente = en.nextElement().toString();
			variableTDS variable = tablaSimbolos.get(siguiente);
			
			if (variable.getTipo() == "numerica") {
				System.out.println(siguiente+"\t\t\t"+variable.getTipo()+"\t\t"+variable.getValor()+"\n");
			} else {
				System.out.println(siguiente+"\t\t\t"+variable.getTipo()+"\t\t\t"+variable.getValor()+"\n");
			}
			
		}
}

  private final SintacticoCup parser;

  /** Constructor */
  CUP$SintacticoCup$actions(SintacticoCup parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$SintacticoCup$do_action(
    int                        CUP$SintacticoCup$act_num,
    java_cup.runtime.lr_parser CUP$SintacticoCup$parser,
    java.util.Stack            CUP$SintacticoCup$stack,
    int                        CUP$SintacticoCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SintacticoCup$result;

      /* select the action based on the action number */
      switch (CUP$SintacticoCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SentenciaRandomize ::= randomize 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaRandomize",24, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // SentenciasNext ::= entrada next variable 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		RESULT = n;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciasNext",39, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // SentenciasNext ::= Sentencia SentenciasNext 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		RESULT = n;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciasNext",39, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Step ::= step error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de STEP.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Step",38, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // Step ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Step",38, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Step ::= step Expresion 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Step",38, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // SentenciaFor ::= t_for error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de FOR.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaFor",16, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // SentenciaFor ::= t_for variable igual Expresion to Expresion Step SentenciasNext 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-6)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-6)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-4)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		
																							if (tipoVar(v) != tipoConst((String) e)) System.err.println("Error semantico en la linea "+(vleft+1)+", el tipo de la expresion no es igual al tipo de la constante.");
																							if (!n.equals(v)) System.err.println("Error semantico en la linea "+(vleft+1)+", la variable en FOR y NEXT debe ser la misma.");
																							
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaFor",16, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-7)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // Matriz2 ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Matriz2",36, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Matriz2 ::= coma constante 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Matriz2",36, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // MasDim ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasDim",37, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // MasDim ::= coma variable parentesis_izq constante Matriz2 parentesis_dch MasDim 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasDim",37, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // SentenciaDim ::= dim error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de DIM.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaDim",22, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // SentenciaDim ::= dim variable parentesis_izq constante Matriz2 parentesis_dch MasDim 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-5)).value;
		
																							if (!variableAlmacenada((String) v)) {
																								System.err.println("Error semantico en la linea "+(vleft+1)+", variable "+v+" no declarada.");
																								} else { 
																							}
																							
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaDim",22, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-6)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // SentenciaRestore ::= restore 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaRestore",21, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // SentenciaRead ::= read error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de READ.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaRead",20, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SentenciaRead ::= read variable MasVariables 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		
													if (!variableAlmacenada((String) v)) {
														System.err.println("Error semantico en la linea "+(vleft+1)+", variable "+v+" no declarada.");
														} else { 
													}
													
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaRead",20, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // MasConstantes ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasConstantes",35, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // MasConstantes ::= coma constante 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasConstantes",35, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // SentenciaData ::= data error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de DATA.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaData",19, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SentenciaData ::= data constante MasConstantes 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaData",19, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // SalidaTexto ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SalidaTexto",32, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // SalidaTexto ::= constante punto_coma 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SalidaTexto",32, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // MasVariables ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasVariables",34, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // MasVariables ::= coma variable MasVariables 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasVariables",34, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SentenciaInput ::= input error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de INPUT");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaInput",18, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SentenciaInput ::= input SalidaTexto variable MasVariables 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		
												String entradaTeclado = "";
												System.out.print("Introduzca el valor de la variable "+v);
    										    Scanner entradaEscaner = new Scanner (System.in);
    										    entradaTeclado = entradaEscaner.nextLine ();
    										    if (tipoVar(v) == tipoConst(entradaTeclado)) {
													introducirVariableTDS(v, entradaTeclado);
												} else { System.err.println("Error semantico en la linea "+(vleft+1)+", entrada no coincide con tipo de variable.");
												}
												
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaInput",18, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // InputVar ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("InputVar",40, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // InputVar ::= punto_coma Expresion 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		RESULT = v;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("InputVar",40, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // MasExpresiones ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasExpresiones",33, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // MasExpresiones ::= coma Expresion 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasExpresiones",33, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SentenciaPrint ::= print error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de PRINT.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaPrint",17, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SentenciaPrint ::= print Expresion MasExpresiones InputVar 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		
															if (v == null) {
															if (!variableAlmacenada((String) e)) {
																System.err.println("Error semantico en la linea "+(eleft+1)+", variable "+e+" no declarada.");
																} else { 
																	}
															} else {
															if (!variableAlmacenada((String) v)) {
																System.err.println("Error semantico en la linea "+(vleft+1)+", variable "+v+" no declarada.");
																} else { 
																	}}
															
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaPrint",17, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SentenciaStop ::= stop 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaStop",15, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // MasEntradas ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasEntradas",31, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MasEntradas ::= coma constante 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!comprobarEntero(c)) System.err.println("Error semantico, la linea referida en la linea "+(cleft+1)+" debe ser un entero positivo.");;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("MasEntradas",31, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SentenciaOn ::= on error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de ON.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaOn",14, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SentenciaOn ::= on Expresion t_goto constante MasEntradas 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		if (!comprobarEntero(c)) System.err.println("Error semantico, la linea referida en la linea "+(cleft+1)+" debe ser un entero positivo.");;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaOn",14, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SentenciasReturn ::= t_return 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciasReturn",30, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SentenciasReturn ::= Sentencia SentenciasReturn 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciasReturn",30, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SentenciaGosub ::= gosub error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de GOSUB.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaGosub",13, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SentenciaGosub ::= gosub constante SentenciasReturn 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		if (!comprobarEntero(c)) System.err.println("Error semantico, la linea referida en la linea "+(cleft+1)+" debe ser un entero positivo.");;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaGosub",13, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SentenciaIf ::= t_if Expresion Comparacion Expresion then SentenciaGoto 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaIf",12, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SentenciaIf ::= t_if Expresion Comparacion Expresion then constante 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!comprobarEntero(c)) System.err.println("Error semantico, la linea referida en la linea "+(cleft+1)+" debe ser un entero positivo.");;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaIf",12, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-5)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SentenciaGoto ::= t_goto error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de GOTO.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaGoto",11, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SentenciaGoto ::= t_goto constante 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!comprobarEntero(c)) System.err.println("Error semantico, la linea referida en la linea "+(cleft+1)+" debe ser un entero positivo.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaGoto",11, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SentenciaControl ::= SentenciaStop 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaControl",10, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SentenciaControl ::= SentenciaOn 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaControl",10, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SentenciaControl ::= SentenciaGosub 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaControl",10, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SentenciaControl ::= SentenciaIf 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaControl",10, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // SentenciaControl ::= SentenciaGoto 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaControl",10, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SentenciaLet ::= let error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de LET.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaLet",9, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SentenciaLet ::= let variable igual Expresion 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		
														if ((variableAlmacenada(v)) && (tipoVar(v) == tipoConst((String) e))) {
															tablaSimbolos.remove(v);
															
															introducirVariableTDS(v, (String) e);
														} else {
															if (tipoVar(v) == tipoConst((String) e)) {
															introducirVariableTDS(v, (String) e);
															} else { 
																if (esEntero(v)&&esEntero((String) e)) {
																	tablaSimbolos.remove(v);
																	introducirVariableTDS(v, (String) e);
																} else {
																	System.err.println("Error semantico en la linea "+(vleft+1)+", entrada no coincide con tipo de variable.");
															}}
														}
														
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaLet",9, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CuerpoFuncion ::= igual Expresion 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("CuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CuerpoFuncion ::= parentesis_izq variable parentesis_dch igual Expresion 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("CuerpoFuncion",29, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-4)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SentenciaDef ::= def error 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		System.err.println("Error sintactico en la linea "+(l+1)+", revisa la estructura de DEF.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaDef",8, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SentenciaDef ::= def fnx CuerpoFuncion 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaDef",8, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SentenciaRem ::= rem 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("SentenciaRem",23, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExtenderExp ::= 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("ExtenderExp",28, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ExtenderExp ::= Operacion Expresion 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		RESULT = e;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("ExtenderExp",28, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Expresion ::= Operador ExtenderExp 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		
																											RESULT = o;
																											if ((tipoConst((String) e)=="cadena")&&((tipoConst((String) o)!="cadena")&&(o!=""))) System.err.println("Error semantico en la linea "+(oleft+1)+", en una operacion todos los tipos deben ser numericos.");
																											
																											
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Expresion ::= parentesis_izq Operador ExtenderExp parentesis_dch 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		
																			RESULT = o;
																			if ((tipoConst((String) e)=="cadena")&&((tipoConst((String) o)!="cadena")&&(o!=""))) System.err.println("Error semantico en la linea "+(oleft+1)+", en una operacion todos los tipos deben ser numericos.");
																			
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Expresion",6, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Operacion2 ::= resta 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operacion2",42, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Operacion2 ::= suma 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operacion2",42, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Operacion1 ::= Operacion2 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operacion1",41, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Operacion1 ::= division 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operacion1",41, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Operacion1 ::= multiplicacion 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operacion1",41, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Operacion ::= Operacion1 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operacion",5, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Operacion ::= potencia 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operacion",5, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Operador ::= Funcion 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operador",4, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Operador ::= rnd 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operador",4, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Operador ::= variable 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		
								 if (variableAlmacenada(v)) {
								 		RESULT = v;
								 	} else {
								 		System.err.println("Error semantico en la linea "+(vleft+1)+", la variable "+v+" no ha sido declarada");
								 	}
								 
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operador",4, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Operador ::= constante 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		RESULT = c;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Operador",4, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ParametroFuncion ::= parentesis_izq Operador parentesis_dch 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		RESULT = o;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("ParametroFuncion",27, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RestoFunciones ::= tan ParametroFuncion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!esEntero((String) o)) {System.err.println("Error de sintaxis en la linea "+(oleft+1)+", el parametro de una funcion debe ser de tipo numerico");
												} else {
													if (tablaSimbolos.containsKey((String) o)) {
														if ((Double.parseDouble(tablaSimbolos.get((String) o).getValor())%1.571)==0) System.err.println("El valor de tangente tiende a infinito.");
													} else { if ((Double.parseDouble((String) o)%1.571)==0) System.err.println("El valor de tangente tiende a infinito.");
													} 
													}
												
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("RestoFunciones",26, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RestoFunciones ::= sin ParametroFuncion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!esEntero((String) o)) System.err.println("Error de sintaxis en la linea "+(oleft+1)+", el parametro de una funcion debe ser de tipo numerico");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("RestoFunciones",26, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RestoFunciones ::= sgn ParametroFuncion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!esEntero((String) o)) System.err.println("Error de sintaxis en la linea "+(oleft+1)+", el parametro de una funcion debe ser de tipo numerico");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("RestoFunciones",26, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RestoFunciones ::= t_int ParametroFuncion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!esEntero((String) o)) System.err.println("Error de sintaxis en la linea "+(oleft+1)+", el parametro de una funcion debe ser de tipo numerico");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("RestoFunciones",26, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RestoFunciones ::= exp ParametroFuncion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!esEntero((String) o)) {System.err.println("Error de sintaxis en la linea "+(oleft+1)+", el parametro de una funcion debe ser de tipo numerico");
												} else {
													if (tablaSimbolos.containsKey((String) o)) {
														if (Double.parseDouble(tablaSimbolos.get((String) o).getValor())>9999999) System.err.println("El valor de exponencial tiende a infinito.");
													} else { if (Double.parseDouble((String) o)>9999999) System.err.println("El valor de exponencial tiende a infinito.");
													} 
													}
												
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("RestoFunciones",26, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RestoFunciones ::= cos ParametroFuncion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!esEntero((String) o)) System.err.println("Error de sintaxis en la linea "+(oleft+1)+", el parametro de una funcion debe ser de tipo numerico");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("RestoFunciones",26, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RestoFunciones ::= atn ParametroFuncion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!esEntero((String) o)) System.err.println("Error de sintaxis en la linea "+(oleft+1)+", el parametro de una funcion debe ser de tipo numerico");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("RestoFunciones",26, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RestoFunciones ::= abs ParametroFuncion 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		if (!esEntero((String) o)) System.err.println("Error de sintaxis en la linea "+(oleft+1)+", el parametro de una funcion debe ser de tipo numerico");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("RestoFunciones",26, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Funcion ::= RestoFunciones 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Funcion",3, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Funcion ::= sqr parentesis_izq Operador parentesis_dch 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		if (!comprobarRaiz((String) o)) System.err.println("Error semantico en linea "+(oleft+1)+", la funcion raiz cuadrada no acepta numeros menores a 0");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Funcion",3, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Funcion ::= log parentesis_izq Operador parentesis_dch 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		
																if (!comprobarLogaritmo((String) o)) System.err.println("Error semantico en linea "+(oleft+1)+", la funcion logaritmo no acepta numeros menores o iguales a 0");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Funcion",3, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-3)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Comparacion ::= no_igual 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Comparacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Comparacion ::= igual 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Comparacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Comparacion ::= mayor_igual 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Comparacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Comparacion ::= menor_igual 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Comparacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Comparacion ::= mayor 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Comparacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Comparacion ::= menor 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		 RESULT = e; 
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Comparacion",2, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // S ::= error 
            {
              Object RESULT =null;
		System.err.println("Sentencia invalida, se ha detectado una estructura invalida despues del numero de linea.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S ::= SentenciaNext 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S ::= SentenciaRem 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S ::= SentenciaRandomize 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S ::= SentenciaDim 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S ::= SentenciaRestore 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S ::= SentenciaRead 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S ::= SentenciaData 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S ::= SentenciaInput 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S ::= SentenciaPrint 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S ::= SentenciaFor 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S ::= SentenciaControl 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S ::= SentenciaLet 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S ::= SentenciaDef 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("S",25, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Sentencia ::= error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;
		System.out.println("Error al comienzo de linea: todas las lineas deben comenzar con un numero de linea.");
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Sentencia ::= entrada NT$1 S 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		int ENTleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).left;
		int ENTright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).right;
		String ENT = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)).value;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Sentencia",7, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
		int ENTleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).left;
		int ENTright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()).right;
		String ENT = (String)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.peek()).value;

								lineaValida(ENT, ENTleft+2); 
								if (primera) {
									nodoRaiz = new NodoRaiz(); 
									arbol = new Arbol(nodoRaiz); 
									primera = false; } 
								
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("NT$1",44, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Programa ::= entrada NT$0 end 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-2)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
finAnalisis();
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("NT$0",43, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Programa ::= Sentencia Programa 
            {
              Object RESULT =null;

              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("Programa",1, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          return CUP$SintacticoCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)).value;
		RESULT = start_val;
              CUP$SintacticoCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.elementAt(CUP$SintacticoCup$top-1)), ((java_cup.runtime.Symbol)CUP$SintacticoCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SintacticoCup$parser.done_parsing();
          return CUP$SintacticoCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

