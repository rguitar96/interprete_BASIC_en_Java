/* The following code was generated by JFlex 1.4.3 on 10/12/17 13:12 */

 package procesadores;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.io.*;
import java_cup.runtime.*;

class Yytoken {
	public int contador;
    public String token;
    public String tipo;
    public int linea;
    public int columna;
    
    Yytoken (int contador,String token, String tipo, int linea, int columna){
        this.contador = contador;
        this.token = new String(token);
        this.tipo = tipo;
        this.linea = linea;
        this.columna = columna;
    }
    
    public String toString() {
        if (tipo == "error"){
            return "Se ha detectado un error lexico, no se reconoce la palabra: " + token + " en la linea: " + (linea+1) + ". ";
        }
        if (tipo == "constante" || tipo == "variable" || tipo == "entrada"){
            return tipo + "(" + token + ")";
        }
        else{
            return token;
}}}


//Bloque de configuracion analizador

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 10/12/17 13:12 from the specification file
 * <tt>C:/Users/Rodrigo/workspace/Analizador_BASIC/lexico.lex</tt>
 */
class Lexico implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0, 20, 22,  0, 20, 21,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
    14,  4,  3,  4,  5,  4,  4,  4, 43, 44,  6, 15,  7, 16, 17,  8, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  4,  9, 10, 11, 12,  4, 
     0, 28, 35, 40, 27, 19, 23, 32, 39, 30, 18, 18, 37, 26, 24, 31, 
    36, 41, 25, 33, 29, 34, 18, 18, 38, 18, 42,  0,  0,  0, 13,  4, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  4,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\1\2\1\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\2\16"+
    "\1\13\1\0\15\16\1\17\1\20\1\21\3\0\1\2"+
    "\1\22\1\23\1\24\1\16\2\21\1\25\32\21\2\2"+
    "\1\26\1\27\1\30\2\21\1\31\3\21\1\32\4\21"+
    "\1\33\1\34\1\35\1\36\1\21\1\37\1\40\1\21"+
    "\1\41\4\21\1\42\1\43\1\44\2\21\1\45\1\46"+
    "\1\47\5\21\1\50\1\21\1\51\7\21\1\52\1\53"+
    "\1\54\3\21\1\55\1\56\1\21\1\57\1\21\1\60"+
    "\1\61\1\21\1\62\2\21\1\63\1\64\1\65\1\66"+
    "\2\21\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\55\0\132\0\207\0\264\0\55\0\55\0\55"+
    "\0\55\0\341\0\55\0\u010e\0\55\0\55\0\55\0\55"+
    "\0\u013b\0\u0168\0\u0195\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249"+
    "\0\u0276\0\u02a3\0\u02d0\0\u02fd\0\u032a\0\u0357\0\u0384\0\u03b1"+
    "\0\u03de\0\55\0\55\0\132\0\u040b\0\u0438\0\264\0\55"+
    "\0\55\0\55\0\55\0\55\0\u0465\0\u0492\0\u0195\0\u04bf"+
    "\0\u04ec\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627"+
    "\0\u0654\0\u0681\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762\0\u078f"+
    "\0\u07bc\0\u07e9\0\u0816\0\u0843\0\u0870\0\u089d\0\u08ca\0\u08f7"+
    "\0\u0924\0\u0951\0\u0438\0\132\0\132\0\132\0\u097e\0\u09ab"+
    "\0\u09d8\0\u0a05\0\u0a32\0\u0a5f\0\132\0\u0a8c\0\u0ab9\0\u0ae6"+
    "\0\u0b13\0\132\0\132\0\132\0\55\0\u0b40\0\55\0\132"+
    "\0\u0b6d\0\55\0\u0b9a\0\u0bc7\0\u0bf4\0\u0c21\0\132\0\132"+
    "\0\132\0\u0c4e\0\u0c7b\0\132\0\132\0\55\0\u0ca8\0\u0cd5"+
    "\0\u0d02\0\u0d2f\0\u0d5c\0\55\0\u0d89\0\55\0\u0db6\0\u0de3"+
    "\0\u0e10\0\u0e3d\0\u0e6a\0\u0e97\0\u0ec4\0\55\0\55\0\55"+
    "\0\u0ef1\0\u0f1e\0\u0f4b\0\55\0\55\0\u0f78\0\55\0\u0fa5"+
    "\0\55\0\55\0\u0fd2\0\132\0\u0fff\0\u102c\0\55\0\55"+
    "\0\55\0\132\0\u1059\0\u1086\0\132";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\2\2\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\2\1\21\1\22\1\16\1\23\1\24\1\25\1\26"+
    "\1\27\1\21\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\2\21\1\37\1\40\2\21\1\41\2\21\1\42"+
    "\1\43\56\0\2\44\17\0\2\44\3\0\24\44\4\0"+
    "\1\4\16\0\1\45\1\0\1\46\32\0\2\47\1\50"+
    "\20\47\3\0\24\47\15\0\1\51\1\52\53\0\1\53"+
    "\42\0\2\44\2\0\1\54\14\0\2\44\3\0\24\44"+
    "\3\0\2\44\2\0\1\54\14\0\2\44\3\0\1\44"+
    "\1\55\15\44\1\56\4\44\4\0\1\57\53\0\2\44"+
    "\2\0\1\54\14\0\2\44\3\0\1\44\1\60\6\44"+
    "\1\61\13\44\3\0\2\44\2\0\1\54\14\0\1\44"+
    "\1\62\3\0\24\44\3\0\2\44\2\0\1\54\14\0"+
    "\1\44\1\63\3\0\1\44\1\64\3\44\1\65\16\44"+
    "\3\0\2\44\2\0\1\54\14\0\1\44\1\66\3\0"+
    "\5\44\1\67\1\44\1\70\14\44\3\0\2\44\2\0"+
    "\1\54\14\0\2\44\3\0\6\44\1\71\5\44\1\72"+
    "\7\44\3\0\2\44\2\0\1\54\14\0\2\44\3\0"+
    "\5\44\1\73\2\44\1\74\7\44\1\75\3\44\3\0"+
    "\2\44\2\0\1\54\14\0\2\44\3\0\1\76\1\77"+
    "\22\44\3\0\2\44\2\0\1\54\14\0\2\44\3\0"+
    "\1\44\1\100\22\44\3\0\2\44\2\0\1\54\14\0"+
    "\2\44\3\0\10\44\1\101\13\44\3\0\2\44\2\0"+
    "\1\54\14\0\2\44\3\0\6\44\1\102\1\103\1\44"+
    "\1\104\10\44\1\105\1\44\3\0\2\44\2\0\1\54"+
    "\14\0\2\44\3\0\2\44\1\106\21\44\3\0\2\44"+
    "\2\0\1\54\14\0\1\44\1\107\3\0\10\44\1\110"+
    "\13\44\3\0\2\44\2\0\1\54\14\0\2\44\3\0"+
    "\10\44\1\111\13\44\4\0\1\112\54\0\1\113\53\0"+
    "\2\44\17\0\2\44\3\0\4\44\1\114\17\44\3\0"+
    "\2\44\17\0\2\44\3\0\15\44\1\115\6\44\3\0"+
    "\2\44\17\0\2\116\3\0\24\116\3\0\2\44\17\0"+
    "\2\44\3\0\2\44\1\117\21\44\3\0\2\44\17\0"+
    "\2\44\3\0\17\44\1\120\4\44\3\0\2\44\17\0"+
    "\2\44\3\0\3\44\1\121\1\44\1\122\1\123\3\44"+
    "\1\124\11\44\3\0\2\44\17\0\2\44\3\0\4\44"+
    "\1\125\17\44\3\0\2\44\17\0\2\44\3\0\1\44"+
    "\1\126\22\44\3\0\2\44\17\0\2\44\3\0\1\127"+
    "\23\44\3\0\2\44\17\0\2\44\3\0\6\44\1\130"+
    "\15\44\3\0\2\44\17\0\2\44\3\0\3\44\1\131"+
    "\20\44\3\0\2\44\17\0\2\44\3\0\1\44\1\132"+
    "\22\44\3\0\2\44\17\0\2\44\3\0\12\44\1\133"+
    "\11\44\3\0\2\44\17\0\2\44\3\0\1\44\1\134"+
    "\22\44\3\0\2\44\13\0\1\135\3\0\2\44\2\0"+
    "\1\135\24\44\3\0\2\44\17\0\1\44\1\136\3\0"+
    "\24\44\3\0\2\44\13\0\1\137\3\0\2\44\2\0"+
    "\1\137\24\44\3\0\2\44\17\0\2\44\3\0\6\44"+
    "\1\140\6\44\1\141\6\44\3\0\2\44\13\0\1\142"+
    "\3\0\2\44\2\0\1\142\24\44\3\0\2\44\17\0"+
    "\2\44\3\0\6\44\1\143\3\44\1\144\11\44\3\0"+
    "\2\44\17\0\1\44\1\145\3\0\10\44\1\146\13\44"+
    "\3\0\2\44\17\0\2\44\3\0\1\44\1\147\22\44"+
    "\3\0\2\44\17\0\2\44\3\0\1\44\1\150\22\44"+
    "\3\0\2\44\17\0\2\44\3\0\2\44\1\151\21\44"+
    "\3\0\2\44\17\0\2\44\3\0\7\44\1\152\14\44"+
    "\3\0\2\44\17\0\2\44\3\0\6\44\1\153\15\44"+
    "\3\0\2\44\17\0\2\44\3\0\11\44\1\154\12\44"+
    "\3\0\2\44\17\0\2\44\3\0\12\44\1\155\11\44"+
    "\4\0\1\112\20\0\1\46\32\0\2\44\13\0\1\156"+
    "\3\0\2\44\2\0\1\156\24\44\3\0\2\44\17\0"+
    "\2\44\3\0\6\44\1\157\15\44\2\0\25\121\2\0"+
    "\26\121\1\0\2\44\17\0\2\44\3\0\4\44\1\160"+
    "\17\44\3\0\2\44\17\0\2\44\3\0\13\44\1\161"+
    "\10\44\3\0\2\44\17\0\2\44\3\0\6\44\1\162"+
    "\15\44\3\0\2\44\17\0\2\44\3\0\4\44\1\163"+
    "\17\44\3\0\2\44\13\0\1\164\3\0\2\44\2\0"+
    "\1\164\24\44\3\0\2\44\17\0\2\44\3\0\5\44"+
    "\1\165\16\44\3\0\2\44\13\0\1\166\3\0\2\44"+
    "\2\0\1\166\24\44\3\0\2\44\17\0\2\44\3\0"+
    "\1\44\1\167\22\44\3\0\2\44\17\0\2\44\3\0"+
    "\13\44\1\170\10\44\3\0\2\44\17\0\2\44\3\0"+
    "\10\44\1\171\13\44\3\0\2\44\17\0\2\44\3\0"+
    "\13\44\1\172\10\44\3\0\2\44\17\0\2\44\3\0"+
    "\15\44\1\173\6\44\3\0\2\44\17\0\2\44\3\0"+
    "\15\44\1\174\6\44\3\0\2\44\17\0\2\44\3\0"+
    "\1\44\1\175\22\44\3\0\2\44\13\0\1\176\3\0"+
    "\2\44\2\0\1\176\24\44\3\0\2\44\13\0\1\177"+
    "\3\0\2\44\2\0\1\177\24\44\3\0\2\44\13\0"+
    "\1\200\3\0\2\44\2\0\1\200\24\44\3\0\2\44"+
    "\17\0\2\44\3\0\2\44\1\201\21\44\3\0\2\44"+
    "\17\0\2\44\3\0\10\44\1\202\13\44\3\0\2\44"+
    "\17\0\2\44\3\0\10\44\1\203\13\44\3\0\2\44"+
    "\13\0\1\204\3\0\2\44\2\0\1\204\24\44\3\0"+
    "\2\44\13\0\1\205\3\0\2\44\2\0\1\205\24\44"+
    "\3\0\2\44\17\0\2\44\3\0\6\44\1\206\15\44"+
    "\3\0\2\44\13\0\1\207\3\0\2\44\2\0\1\207"+
    "\24\44\3\0\2\44\17\0\2\44\3\0\14\44\1\210"+
    "\7\44\3\0\2\44\13\0\1\211\3\0\2\44\2\0"+
    "\1\211\24\44\3\0\2\44\13\0\1\212\3\0\2\44"+
    "\2\0\1\212\24\44\3\0\2\44\17\0\2\44\3\0"+
    "\6\44\1\213\15\44\3\0\2\44\17\0\2\44\3\0"+
    "\1\44\1\214\22\44\3\0\2\44\17\0\2\44\3\0"+
    "\2\44\1\215\21\44\3\0\2\44\17\0\2\44\3\0"+
    "\3\44\1\216\20\44\3\0\2\44\13\0\1\217\3\0"+
    "\2\44\2\0\1\217\24\44\3\0\2\44\13\0\1\220"+
    "\3\0\2\44\2\0\1\220\24\44\3\0\2\44\13\0"+
    "\1\221\3\0\2\44\2\0\1\221\24\44\3\0\2\44"+
    "\17\0\1\44\1\222\3\0\24\44\3\0\2\44\17\0"+
    "\2\44\3\0\7\44\1\223\14\44\3\0\2\44\17\0"+
    "\2\44\3\0\23\44\1\224\3\0\2\44\17\0\1\44"+
    "\1\225\3\0\24\44\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4275];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\3\1\4\11\1\1\1\11\1\1\4\11"+
    "\3\1\1\0\15\1\2\11\1\1\3\0\5\11\60\1"+
    "\1\11\1\1\1\11\2\1\1\11\13\1\1\11\5\1"+
    "\1\11\1\1\1\11\7\1\3\11\3\1\2\11\1\1"+
    "\1\11\1\1\2\11\4\1\3\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[149];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */

private ArrayList<Yytoken> tokenList = new ArrayList<Yytoken>();
private ArrayList<Yytoken> errorList = new ArrayList<Yytoken>();
int cont = 0;
int contErr = 0;
boolean banderaReservada = true;
public int getErr(){
	return contErr;
}



public void imprimir() throws IOException {
	this.writeOutputFile();
	this.escribirErrores();
}

private void writeOutputFile() throws IOException {
	System.out.println("****************FIN DEL ANALIZADOR LEXICO****************");
	System.out.println("Lista de tokens almacenados con exito: ");
	System.out.print("[");
	int separador = 0;
	for (Yytoken t : this.tokenList) {
		separador++;
		if (separador>4) {
			System.out.println();
			separador = 0;
			}
		System.out.print(t.toString() + ",");
	}
	System.out.print("]");
	System.out.println("\n\n");
}

private void escribirErrores() {
		if(contErr>0){
            System.out.println("\n\nHemos encontrado " + contErr + " errores lexicos.");
            System.out.print ("\n[");
            for(Yytoken t: this.errorList){
                System.out.print(t.toString());
            }
            System.out.print("]");
        }
        else{
            System.out.println("\n No hay errores lexicos.");
        }
}

public static void main(String[] args) {
		String entrada = "";
        System.out.println("\n*** Procesando archivo ***\n");
        entrada = "entrada.txt";
        BufferedReader bf = null;
        try {
            bf = new BufferedReader(new FileReader(entrada));
            Lexico a = new Lexico(bf);
            Symbol token = null;
            do {
                token = a.next_token();
            } while (token != null);
        } catch (Exception ex) {
            Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                bf.close();
            } catch (IOException ex) {
                Logger.getLogger(Lexico.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        System.out.println("\n*** Ejecucion finalizada ***\n");
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexico(java.io.Reader in) {
  	System.out.println("****************COMIENZO DEL PROGRAMA****************");
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexico(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    		this.writeOutputFile(); 
		this.escribirErrores();
		System.exit(0);

  yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 6: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "punto_coma", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.punto_coma, yyline, yycolumn, yytext());
          }
        case 56: break;
        case 30: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.to, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.to, yyline, yycolumn, yytext());
		}
          }
        case 57: break;
        case 19: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "no_igual", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.no_igual, yyline, yycolumn, yytext());
          }
        case 58: break;
        case 38: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.cos, yyline, yycolumn, yytext());
          }
        case 59: break;
        case 10: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "potencia", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.potencia, yyline, yycolumn, yytext());
          }
        case 60: break;
        case 14: 
          { cont++;
    	banderaReservada = false;
    	Yytoken t = new Yytoken(cont, yytext(), "variable", yyline, yycolumn);
    	this.tokenList.add(t); 
    	return new Symbol(SintacticoSym.variable, yyline, yycolumn, yytext());
          }
        case 61: break;
        case 2: 
          { banderaReservada = false;
    	if (cont>0) {
    		this.tokenList.add(new Yytoken(cont, yytext(), "constante", yyline, yycolumn)); 
    		return new Symbol(SintacticoSym.constante, yyline, yycolumn, yytext());
    		} 
    	else {
    		this.tokenList.add(new Yytoken(cont, yytext(), "entrada", yyline, yycolumn)); 
    		return new Symbol(SintacticoSym.entrada, yyline, yycolumn, yytext());
    		}
          }
        case 62: break;
        case 32: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.t_int, yyline, yycolumn, yytext());
          }
        case 63: break;
        case 45: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.data, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.data, yyline, yycolumn, yytext());
		}
          }
        case 64: break;
        case 34: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.sin, yyline, yycolumn, yytext());
          }
        case 65: break;
        case 26: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.rnd, yyline, yycolumn, yytext());
          }
        case 66: break;
        case 7: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "menor", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.menor, yyline, yycolumn, yytext());
          }
        case 67: break;
        case 47: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.t_goto, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.t_goto, yyline, yycolumn, yytext());
		}
          }
        case 68: break;
        case 22: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.end, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.end, yyline, yycolumn, yytext());
		}
          }
        case 69: break;
        case 28: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.abs, yyline, yycolumn, yytext());
          }
        case 70: break;
        case 11: 
          { banderaReservada = true;
          }
        case 71: break;
        case 39: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.t_for, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.t_for, yyline, yycolumn, yytext());
		}
          }
        case 72: break;
        case 42: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.let, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.let, yyline, yycolumn, yytext());
		}
          }
        case 73: break;
        case 41: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.dim, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.dim, yyline, yycolumn, yytext());
		}
          }
        case 74: break;
        case 17: 
          { contErr++; 
    	banderaReservada = false;
    	Yytoken t = new Yytoken(cont, yytext(), "error", yyline, yycolumn);
    	this.errorList.add(t);
          }
        case 75: break;
        case 54: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.restore, yyline, yycolumn, yytext());
          }
        case 76: break;
        case 46: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.then, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.then, yyline, yycolumn, yytext());
		}
          }
        case 77: break;
        case 51: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.input, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.input, yyline, yycolumn, yytext());
		}
          }
        case 78: break;
        case 18: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "menor_igual", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.menor_igual, yyline, yycolumn, yytext());
          }
        case 79: break;
        case 49: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.stop, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.stop, yyline, yycolumn, yytext());
		}
          }
        case 80: break;
        case 9: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "mayor", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.mayor, yyline, yycolumn, yytext());
          }
        case 81: break;
        case 15: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "parentesis_izq", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.parentesis_izq, yyline, yycolumn, yytext());
          }
        case 82: break;
        case 23: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.exp, yyline, yycolumn, yytext());
          }
        case 83: break;
        case 52: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.gosub, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.gosub, yyline, yycolumn, yytext());
		}
          }
        case 84: break;
        case 40: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.def, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.def, yyline, yycolumn, yytext());
		}
          }
        case 85: break;
        case 25: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.rem, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.rem, yyline, yycolumn, yytext());
		}
          }
        case 86: break;
        case 35: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.sgn, yyline, yycolumn, yytext());
          }
        case 87: break;
        case 20: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "mayor_igual", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.mayor_igual, yyline, yycolumn, yytext());
          }
        case 88: break;
        case 33: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.on, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.on, yyline, yycolumn, yytext());
		}
          }
        case 89: break;
        case 24: 
          { cont++;
    	banderaReservada = false;
    	Yytoken t = new Yytoken(cont, yytext(), "variable", yyline, yycolumn);
    	this.tokenList.add(t); 
    	return new Symbol(SintacticoSym.fnx, yyline, yycolumn, yytext());
          }
        case 90: break;
        case 36: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.sqr, yyline, yycolumn, yytext());
          }
        case 91: break;
        case 13: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "resta", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.resta, yyline, yycolumn, yytext());
          }
        case 92: break;
        case 5: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "division", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.division, yyline, yycolumn, yytext());
          }
        case 93: break;
        case 27: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.atn, yyline, yycolumn, yytext());
          }
        case 94: break;
        case 4: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "coma", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.coma, yyline, yycolumn, yytext());
          }
        case 95: break;
        case 43: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.next, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.next, yyline, yycolumn, yytext());
		}
          }
        case 96: break;
        case 50: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.t_return, yyline, yycolumn, yytext());
          }
        case 97: break;
        case 44: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.read, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.read, yyline, yycolumn, yytext());
		}
          }
        case 98: break;
        case 31: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.t_if, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.t_if, yyline, yycolumn, yytext());
		}
          }
        case 99: break;
        case 29: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.tan, yyline, yycolumn, yytext());
          }
        case 100: break;
        case 3: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "multiplicacion", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.multiplicacion, yyline, yycolumn, yytext());
          }
        case 101: break;
        case 55: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.randomize, yyline, yycolumn, yytext());
          }
        case 102: break;
        case 1: 
          { contErr++; 
		errorList.add(new Yytoken(contErr, yytext(), "error", yyline, yycolumn));
          }
        case 103: break;
        case 8: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "igual", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.igual, yyline, yycolumn, yytext());
          }
        case 104: break;
        case 53: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.print, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.print, yyline, yycolumn, yytext());
		}
          }
        case 105: break;
        case 48: 
          { if (banderaReservada) {
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.step, yyline, yycolumn, yytext());
		} else {
			System.err.println("La palabra reservada "+yytext()+" debe estar entre espacios.");
			cont++; 
			this.tokenList.add(new Yytoken(cont, yytext(), "reservada", yyline, yycolumn)); 
			return new Symbol(SintacticoSym.step, yyline, yycolumn, yytext());
		}
          }
        case 106: break;
        case 12: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "suma", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.suma, yyline, yycolumn, yytext());
          }
        case 107: break;
        case 16: 
          { cont++; 
    	banderaReservada = false;
    	this.tokenList.add(new Yytoken(cont, "parentesis_dch", "puntuacion", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.parentesis_dch, yyline, yycolumn, yytext());
          }
        case 108: break;
        case 37: 
          { cont++; 
		banderaReservada = false;
		this.tokenList.add(new Yytoken(cont, yytext(), "funcion", yyline, yycolumn)); 
		return new Symbol(SintacticoSym.log, yyline, yycolumn, yytext());
          }
        case 109: break;
        case 21: 
          { cont++; 
    	banderaReservada = false;
    	String entrada = yytext();
    	entrada = entrada.replace("\n", "");
    	this.tokenList.add(new Yytoken(cont, entrada, "entrada", yyline, yycolumn)); 
    	return new Symbol(SintacticoSym.entrada, yyline, yycolumn, yytext());
          }
        case 110: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                this.writeOutputFile(); 
		this.escribirErrores();
		return new Symbol(SintacticoSym.eof, yyline, yycolumn, yytext());
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
